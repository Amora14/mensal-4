name: Docker Build & GKE Deploy

on:
  push:
    branches: [ "main" ]
  # pull_request: # REMOVIDO: Geralmente não fazemos deploy em pull_requests, apenas build e teste.
  #   branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    # O serviço MySQL aqui é para testes unitários/integração durante o build.
    # Ele não tem relação com o banco de dados que roda no GKE. Só mantive caso vocês o usem.
    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: integrador
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - name: Checkout código
      uses: actions/checkout@v3

    - name: Autenticar no Google Cloud
      id: 'auth'
      uses: 'google-github-actions/auth@v1'
      with:
        workload_identity_provider: 'projects/771557064348/locations/global/workloadIdentityPools/github-pool/providers/github-provider'
        service_account: 'github-actions-sa@festive-post-461507-v9.iam.gserviceaccount.com'

    # NOVO: Gerar uma tag de imagem única baseada no SHA do commit
    - name: Gerar Tag da Imagem
      id: docker_tag
      run: echo "tag=$(echo ${GITHUB_SHA::7})" >> $GITHUB_OUTPUT

    - name: Configurar Docker para Artifact Registry (GCR)
      run: gcloud auth configure-docker us-central1-docker.pkg.dev

    - name: Build e Push Imagem Backend
      env:
        PROJECT_ID: festive-post-461507-v9
      run: |
        # MUDANÇA CRÍTICA: Usando a tag única gerada no passo anterior
        docker build -t mirovisk/backendatt:latest ./Sistema-inte-main
        docker push mirovisk/backendatt:latest

    - name: Build e Push Imagem Frontend
      env:
        PROJECT_ID: festive-post-461507-v9
      run: |
        # MUDANÇA CRÍTICA: Usando a mesma tag única para consistência
        docker build -t us-central1-docker.pkg.dev/${{ env.PROJECT_ID }}/cluster-1/frontendatt:${{ steps.docker_tag.outputs.tag }} ./frontend-cofig
        docker push us-central1-docker.pkg.dev/${{ env.PROJECT_ID }}/cluster-1/frontendatt:${{ steps.docker_tag.outputs.tag }}

    - name: Configurar kubeconfig para GKE
      uses: 'google-github-actions/get-gke-credentials@v1'
      with:
        cluster_name: 'cluster-1'
        location: 'us-central1-a'
        project_id: 'festive-post-461507-v9'

    - name: Deploy Backend no Kubernetes
      run: |
        # MUDANÇA CRÍTICA: Substituir a imagem pela nova tag dinâmica
        # Isso garante que o arquivo YAML mude a cada execução, forçando o Kubernetes a atualizar.
        sed -i "s|image: .*backendatt.*|image: us-central1-docker.pkg.dev/festive-post-461507-v9/cluster-1/backendatt:${{ steps.docker_tag.outputs.tag }}|g" ./backend-config/deployment.yaml
        kubectl apply -f ./backend-config/

    - name: Deploy Database Config no Kubernetes
      run: |
        kubectl apply -f ./database-config/

    - name: Deploy Frontend no Kubernetes
      run: |
        # MUDANÇA CRÍTICA: Substituir a imagem pela nova tag dinâmica
        sed -i "s|image: .*frontendatt.*|image: us-central1-docker.pkg.dev/festive-post-461507-v9/cluster-1/frontendatt:${{ steps.docker_tag.outputs.tag }}|g" ./frontend-config/deployment.yaml
        kubectl apply -f ./frontend-config/
